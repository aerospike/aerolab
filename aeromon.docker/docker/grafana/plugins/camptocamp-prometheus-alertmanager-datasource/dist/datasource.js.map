{"version":3,"sources":["../src/datasource.js"],"names":["dsRegularEscape","value","replace","dsSpecialRegexEscape","_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","severityLevels","jsonData","severity_critical","undefined","toLowerCase","severity_high","severity_warning","severity_info","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","labelSelector","parseLabelSelector","encodeURIComponent","expr","scopedVars","interpolateQueryExpr","datasourceRequest","method","headers","then","results","response","columnsDict","getColumnsDict","columns","getColumns","i","row","Array","fill","item","Date","parse","Object","keys","label","annotation","rows","push","now","variable","defaultFormatFn","escapedValues","map","join","text","column","input","trim","split","index","severityDefined","labelIndex","selectedLabel","status","message","title","target","targetss","refId","legendFormat","labels","JSON","stringify","aliasRegex","match","g1"],"mappings":";;;;;;;;;;;;;AA6MO,WAASA,eAAT,CAAyBC,KAAzB,EAAgC;AACrC,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOA,MAAMC,OAAN,CAAc,IAAd,EAAoB,OAApB,CAAP;AACD;AACD,WAAOD,KAAP;AACD;;6BALeD,e;;AAOT,WAASG,oBAAT,CAA8BF,KAA9B,EAAqC;AAC1C,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOD,gBAAgBC,MAAMC,OAAN,CAAc,KAAd,EAAqB,UAArB,EAAiCA,OAAjC,CAAyC,mBAAzC,EAA8D,QAA9D,CAAhB,CAAP;AACD;AACD,WAAOD,KAAP;AACD;;kCALeE,oB;;;;AApNTC,O;;;;;;;;;;;;;;;;;;;;;mCAEMC,iB;AAEX,mCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,eAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,eAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,eAAKC,CAAL,GAASN,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;;AAEA,eAAKK,cAAL,GAAsB,EAAtB;AACA,cAAIR,iBAAiBS,QAAjB,CAA0BC,iBAA1B,IAA+CC,SAAnD,EAA8D;AAC5D,iBAAKH,cAAL,CAAoBR,iBAAiBS,QAAjB,CAA0BC,iBAA1B,CAA4CE,WAA5C,EAApB,IAAiF,CAAjF;AACD;AACD,cAAIZ,iBAAiBS,QAAjB,CAA0BI,aAA1B,IAA2CF,SAA/C,EAA0D;AACxD,iBAAKH,cAAL,CAAoBR,iBAAiBS,QAAjB,CAA0BI,aAA1B,CAAwCD,WAAxC,EAApB,IAA6E,CAA7E;AACD;AACD,cAAIZ,iBAAiBS,QAAjB,CAA0BK,gBAA1B,IAA8CH,SAAlD,EAA6D;AAC3D,iBAAKH,cAAL,CAAoBR,iBAAiBS,QAAjB,CAA0BK,gBAA1B,CAA2CF,WAA3C,EAApB,IAAgF,CAAhF;AACD;AACD,cAAIZ,iBAAiBS,QAAjB,CAA0BM,aAA1B,IAA2CJ,SAA/C,EAA0D;AACxD,iBAAKH,cAAL,CAAoBR,iBAAiBS,QAAjB,CAA0BM,aAA1B,CAAwCH,WAAxC,EAApB,IAA6E,CAA7E;AACD;AACF;;;;gCAEKI,O,EAAS;AAAA;;AACb,gBAAIC,QAAQ,KAAKC,oBAAL,CAA0BF,OAA1B,CAAZ;AACAC,kBAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,MAAd,CAAqB;AAAA,qBAAK,CAACC,EAAEC,IAAR;AAAA,aAArB,CAAhB;;AAEA,gBAAIL,MAAME,OAAN,CAAcI,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,qBAAO,KAAKhB,CAAL,CAAOiB,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACD;AACD;AACA,gBAAGR,MAAME,OAAN,CAAc,CAAd,EAAiBf,IAAjB,KAA0B,OAA7B,EAAqC;AACnC,kBAAIsB,gBAAgB,KAAKC,kBAAL,CAAwBV,MAAME,OAAN,CAAc,CAAd,EAAiBO,aAAzC,CAApB;AACA,kBAAIN,SAASQ,mBAAmB,KAAKzB,WAAL,CAAiBP,OAAjB,CAAyBqB,MAAME,OAAN,CAAc,CAAd,EAAiBU,IAA1C,EAAgDb,QAAQc,UAAxD,EAAoE,KAAKC,oBAAzE,KAAkG,EAArH,CAAb;AACA,qBAAO,KAAK7B,UAAL,CAAgB8B,iBAAhB,CAAkC;AACvC3B,qBAAK,KAAKA,GAAL,GAAW,uDAAX,GAAmEe,MADjC;AAEvCK,sBAAMR,KAFiC;AAGvCgB,wBAAQ,KAH+B;AAIvCC,yBAAS,EAAE,gBAAgB,kBAAlB;AAJ8B,eAAlC,EAKJC,IALI,CAKC,oBAAY;AAClB,oBAAIC,UAAU;AACZ,0BAAQ,CAAC;AACP,4BAAQ,EADD;AAEP,+BAAW,EAFJ;AAGP,4BAAQ;AAHD,mBAAD;AADI,iBAAd;;AAQA,oBAAGC,SAASZ,IAAT,IAAiBY,SAASZ,IAAT,CAAcA,IAA/B,IAAuCY,SAASZ,IAAT,CAAcA,IAAd,CAAmBF,MAA7D,EAAqE;AACnE,sBAAIe,cAAc,MAAKC,cAAL,CAAoBF,SAASZ,IAAT,CAAcA,IAAlC,EAAwCC,aAAxC,CAAlB;AACAU,0BAAQX,IAAR,CAAa,CAAb,EAAgBe,OAAhB,GAA0B,MAAKC,UAAL,CAAgBH,WAAhB,CAA1B;;AAEA,uBAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIL,SAASZ,IAAT,CAAcA,IAAd,CAAmBF,MAAvC,EAA+CmB,GAA/C,EAAoD;AAClD,wBAAIC,MAAM,IAAIC,KAAJ,CAAUR,QAAQX,IAAR,CAAa,CAAb,EAAgBe,OAAhB,CAAwBjB,MAAlC,EAA0CsB,IAA1C,CAA+C,EAA/C,CAAV;AACA,wBAAIC,OAAOT,SAASZ,IAAT,CAAcA,IAAd,CAAmBiB,CAAnB,CAAX;AACAC,wBAAI,CAAJ,IAAS,CAACI,KAAKC,KAAL,CAAWF,KAAK,UAAL,CAAX,CAAD,CAAT;;AAHkD;AAAA;AAAA;;AAAA;AAKlD,2CAAkBG,OAAOC,IAAP,CAAYJ,KAAK,QAAL,CAAZ,CAAlB,8HAA+C;AAAA,4BAAtCK,KAAsC;;AAC7C,4BAAGA,SAASb,WAAZ,EAAyB;AACvB,8BAAGa,UAAU,UAAb,EAAyB;AACvBR,gCAAIL,YAAYa,KAAZ,CAAJ,IAA0B,MAAK3C,cAAL,CAAoBsC,KAAK,QAAL,EAAeK,KAAf,CAApB,CAA1B;AACD,2BAFD,MAEO;AACLR,gCAAIL,YAAYa,KAAZ,CAAJ,IAA0BL,KAAK,QAAL,EAAeK,KAAf,CAA1B;AACD;AACF;AACF;AAbiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAclD,4CAAuBF,OAAOC,IAAP,CAAYJ,KAAK,aAAL,CAAZ,CAAvB,mIAAyD;AAAA,4BAAhDM,UAAgD;;AACvD,4BAAGA,cAAcd,WAAjB,EAA8B;AAC5BK,8BAAIL,YAAYc,UAAZ,CAAJ,IAA+BN,KAAK,aAAL,EAAoBM,UAApB,CAA/B;AACD;AACF;AAlBiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBlDhB,4BAAQX,IAAR,CAAa,CAAb,EAAgB4B,IAAhB,CAAqBC,IAArB,CAA0BX,GAA1B;AACD;AACF;AACD,uBAAOP,OAAP;AACD,eAzCM,CAAP;AA0CD,aA7CD,MA6CO;AACL,kBAAIhB,UAASQ,mBAAmB,KAAKzB,WAAL,CAAiBP,OAAjB,CAAyBqB,MAAME,OAAN,CAAc,CAAd,EAAiBU,IAA1C,EAAgDb,QAAQc,UAAxD,EAAoE,KAAKC,oBAAzE,KAAkG,EAArH,CAAb;AACA,qBAAO,KAAK7B,UAAL,CAAgB8B,iBAAhB,CAAkC;AACvC3B,qBAAK,KAAKA,GAAL,GAAW,uDAAX,GAAmEe,OADjC;AAEvCK,sBAAMR,KAFiC;AAGvCgB,wBAAQ,KAH+B;AAIvCC,yBAAS,EAAE,gBAAgB,kBAAlB;AAJ8B,eAAlC,EAKJC,IALI,CAKC,oBAAY;AAClB,uBAAO;AACL,0BAAQ,CAAC,EAAE,cAAc,CAAE,CAACE,SAASZ,IAAT,CAAcA,IAAd,CAAmBF,MAApB,EAA4BwB,KAAKQ,GAAL,EAA5B,CAAF,CAAhB,EAAD;AADH,iBAAP;AAGD,eATM,CAAP;AAUD;AACF;;;+CAEoB5D,K,EAAO6D,Q,EAAUC,e,EAAiB;AACrD,gBAAI,OAAO9D,KAAP,KAAiB,QAArB,EAA+B;AAC7B,qBAAOE,qBAAqBF,KAArB,CAAP;AACD;;AAED,gBAAI+D,gBAAgB5D,EAAE6D,GAAF,CAAMhE,KAAN,EAAaE,oBAAb,CAApB;AACA,mBAAO6D,cAAcE,IAAd,CAAmB,GAAnB,CAAP;AACD;;;qCAEUtB,W,EAAa;AACtB,gBAAIE,UAAW,CAAC,EAAEqB,MAAM,MAAR,EAAgBzD,MAAM,MAAtB,EAAD,CAAf;AADsB;AAAA;AAAA;;AAAA;AAEtB,oCAAkB6C,OAAOC,IAAP,CAAYZ,WAAZ,CAAlB,mIAA4C;AAAA,oBAApCwB,MAAoC;;AAC1CtB,wBAAQc,IAAR,CAAa,EAAEO,MAAMC,MAAR,EAAgB1D,MAAM,QAAtB,EAAb;AACD;AAJqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKtB,mBAAOoC,OAAP;AACD;;;6CAGkBuB,K,EAAO;AACxB,gBAAIJ,GAAJ;AACA,gBAAI,OAAOI,KAAP,KAAkB,WAAlB,IAAiCA,MAAMC,IAAN,GAAazC,MAAb,KAAwB,CAA7D,EAAgE;AAC9DoC,oBAAM,CAAC,GAAD,CAAN;AACD,aAFD,MAEO;AACLA,oBAAMI,MAAMC,IAAN,GAAaC,KAAb,CAAmB,SAAnB,CAAN;AACD;AACD,mBAAON,GAAP;AACD;;;yCAGclC,I,EAAMC,a,EAAe;AAClC,gBAAIwC,QAAQ,CAAZ,CADkC,CACnB;AACf,gBAAI5B,cAAc,EAAlB;AACA,gBAAI6B,kBAAkB,KAAtB;AACA,iBAAK,IAAIzB,IAAI,CAAb,EAAgBA,IAAIjB,KAAKF,MAAzB,EAAiCmB,GAAjC,EAAsC;AACpC,mBAAK,IAAI0B,aAAa,CAAtB,EAAyBA,aAAa1C,cAAcH,MAApD,EAA4D6C,YAA5D,EAA0E;AACxE,oBAAIC,gBAAgB3C,cAAc0C,UAAd,CAApB;AACA,oBAAIC,kBAAkB,GAAtB,EAA2B;AAAA;AAAA;AAAA;;AAAA;AACzB;AACA,0CAAkBpB,OAAOC,IAAP,CAAYzB,KAAKiB,CAAL,EAAQ,QAAR,CAAZ,CAAlB,mIAAkD;AAAA,0BAAzCS,KAAyC;;AAChD,0BAAG,EAAEA,SAASb,WAAX,CAAH,EAA4B;AAC1B,4BAAIa,UAAU,UAAd,EAA0B;AACxBgB,4CAAkB,IAAlB;AACD;AACD7B,oCAAYa,KAAZ,IAAqBe,OAArB;AACD;AACF;AATwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAUzB,0CAAuBjB,OAAOC,IAAP,CAAYzB,KAAKiB,CAAL,EAAQ,aAAR,CAAZ,CAAvB,mIAA4D;AAAA,0BAAnDU,UAAmD;;AAC1D,0BAAG,EAAEA,cAAcd,WAAhB,CAAH,EAAiC;AAC/BA,oCAAYc,UAAZ,IAA0Bc,OAA1B;AACD;AACF;AAdwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAe1B,iBAfD,MAeO,IAAI,EAAEG,iBAAiB/B,WAAnB,CAAJ,EAAqC;AAC1C,sBAAI+B,kBAAkB,UAAtB,EAAkC;AAChCF,sCAAkB,IAAlB;AACD;AACD7B,8BAAY+B,aAAZ,IAA6BH,OAA7B;AACD;AACF;AACF;AACD,gBAAI,CAACC,eAAL,EAAsB;AACpB7B,0BAAY,UAAZ,IAA0B4B,OAA1B;AACD;AACD,mBAAO5B,WAAP;AACD;;;2CAEgB;AACf,mBAAO,KAAKpC,UAAL,CAAgB8B,iBAAhB,CAAkC;AACvC3B,mBAAK,KAAKA,GAAL,GAAW,gBADuB;AAEvC4B,sBAAQ;AAF+B,aAAlC,EAGJE,IAHI,CAGC,oBAAY;AAClB,kBAAIE,SAASiC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAO,EAAEA,QAAQ,SAAV,EAAqBC,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACD;AACF,aAPM,CAAP;AAQD;;;+CAEoBxD,O,EAAS;AAAA;;AAC5B;AACAA,oBAAQG,OAAR,GAAkBrB,EAAEsB,MAAF,CAASJ,QAAQG,OAAjB,EAA0B,kBAAU;AACpD,qBAAOsD,OAAOA,MAAP,KAAkB,eAAzB;AACD,aAFiB,CAAlB;;AAIAzD,oBAAQ0D,QAAR,GAAmB5E,EAAE6D,GAAF,CAAM3C,QAAQG,OAAd,EAAuB,kBAAU;AAClD,qBAAO;AACLsD,wBAAQ,OAAKtE,WAAL,CAAiBP,OAAjB,CAAyB6E,OAAOA,MAAhC,CADH;AAEL5C,sBAAM4C,OAAO5C,IAFR;AAGL8C,uBAAOF,OAAOE,KAHT;AAILrD,sBAAMmD,OAAOnD,IAJR;AAKLlB,sBAAMqE,OAAOrE,IAAP,IAAe,QALhB;AAMLwE,8BAAcH,OAAOG,YAAP,IAAuB;AANhC,eAAP;AAQD,aATkB,CAAnB;AAUA,mBAAO5D,OAAP;AACD;;;6CAEkB6D,M,EAAQD,Y,EAAa;AACtC,gBAAGA,iBAAiB,EAApB,EAAuB;AACrB,qBAAOE,KAAKC,SAAL,CAAeF,MAAf,CAAP;AACD;AACD,gBAAIG,aAAa,sBAAjB;AACA,mBAAOJ,aAAahF,OAAb,CAAqBoF,UAArB,EAAiC,UAASC,KAAT,EAAgBC,EAAhB,EAAoB;AAC1D,kBAAIL,OAAOK,EAAP,CAAJ,EAAgB;AACd,uBAAOL,OAAOK,EAAP,CAAP;AACD;AACD,qBAAO,EAAP;AACD,aALM,CAAP;AAMD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n\n    this.severityLevels = {}\n    if (instanceSettings.jsonData.severity_critical != undefined) {\n      this.severityLevels[instanceSettings.jsonData.severity_critical.toLowerCase()] = 4;\n    }\n    if (instanceSettings.jsonData.severity_high != undefined) {\n      this.severityLevels[instanceSettings.jsonData.severity_high.toLowerCase()] = 3;\n    }\n    if (instanceSettings.jsonData.severity_warning != undefined) {\n      this.severityLevels[instanceSettings.jsonData.severity_warning.toLowerCase()] = 2;\n    }\n    if (instanceSettings.jsonData.severity_info != undefined) {\n      this.severityLevels[instanceSettings.jsonData.severity_info.toLowerCase()] = 1;\n    }\n  }\n\n  query(options) {\n    let query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n    // Format data for table panel\n    if(query.targets[0].type === \"table\"){\n      var labelSelector = this.parseLabelSelector(query.targets[0].labelSelector);\n      let filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars, this.interpolateQueryExpr) || \"\");\n      return this.backendSrv.datasourceRequest({\n        url: this.url + '/api/v1/alerts?silenced=false&inhibited=false&filter='+filter,\n        data: query,\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      }).then(response => {\n        let results = {\n          \"data\": [{\n            \"rows\": [],\n            \"columns\": [],\n            \"type\": \"table\"\n          }]\n        };\n\n        if(response.data && response.data.data && response.data.data.length) {\n          let columnsDict = this.getColumnsDict(response.data.data, labelSelector);\n          results.data[0].columns = this.getColumns(columnsDict);\n\n          for (let i = 0; i < response.data.data.length; i++) {\n            let row = new Array(results.data[0].columns.length).fill(\"\");\n            let item = response.data.data[i];\n            row[0] = [Date.parse(item['startsAt'])];\n\n            for (let label of Object.keys(item['labels'])) {\n              if(label in columnsDict) {\n                if(label === 'severity') {\n                  row[columnsDict[label]] = this.severityLevels[item['labels'][label]]\n                } else {\n                  row[columnsDict[label]] = item['labels'][label];\n                }\n              }\n            }\n            for (let annotation of Object.keys(item['annotations'])) {\n              if(annotation in columnsDict) {\n                row[columnsDict[annotation]] = item['annotations'][annotation];\n              }\n            }\n            results.data[0].rows.push(row);\n          }\n        }\n        return results;\n      });\n    } else {\n      let filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars, this.interpolateQueryExpr) || \"\");\n      return this.backendSrv.datasourceRequest({\n        url: this.url + '/api/v1/alerts?silenced=false&inhibited=false&filter='+filter,\n        data: query,\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      }).then(response => {\n        return {\n          \"data\": [{ \"datapoints\": [ [response.data.data.length, Date.now()] ]}]\n        }\n      });\n    }\n  }\n\n  interpolateQueryExpr(value, variable, defaultFormatFn) {\n    if (typeof value === 'string') {\n      return dsSpecialRegexEscape(value);\n    }\n\n    let escapedValues = _.map(value, dsSpecialRegexEscape);\n    return escapedValues.join('|');\n  }\n\n  getColumns(columnsDict) {\n    let columns =  [{ text: \"Time\", type: \"time\" }];\n    for(let column of Object.keys(columnsDict)) {\n      columns.push({ text: column, type: \"string\" })\n    }\n    return columns;\n  }\n\n  // Parses the label list into a map\n  parseLabelSelector(input) {\n    var map;\n    if (typeof(input) === \"undefined\" || input.trim().length === 0) {\n      map = [\"*\"];\n    } else {\n      map = input.trim().split(/\\s*,\\s*/);\n    }\n    return map;\n  }\n\n  // Creates a column index dictionary in to assist in data row construction\n  getColumnsDict(data, labelSelector) {\n    let index = 1; // 0 is the data column\n    let columnsDict = {};\n    let severityDefined = false;\n    for (let i = 0; i < data.length; i++) {\n      for (let labelIndex = 0; labelIndex < labelSelector.length; labelIndex++) {\n        var selectedLabel = labelSelector[labelIndex];\n        if (selectedLabel === \"*\") {\n          // '*' maps to all labels/annotations not already added via the label selector list\n          for (let label of Object.keys(data[i]['labels'])) {\n            if(!(label in columnsDict)) {\n              if (label === 'severity') {\n                severityDefined = true\n              }\n              columnsDict[label] = index++;\n            }\n          }\n          for (let annotation of Object.keys(data[i]['annotations'])) {\n            if(!(annotation in columnsDict)) {\n              columnsDict[annotation] = index++;\n            }\n          }\n        } else if (!(selectedLabel in columnsDict)) {\n          if (selectedLabel === 'severity') {\n            severityDefined = true\n          }\n          columnsDict[selectedLabel] = index++;\n        }\n      }\n    }\n    if (!severityDefined) {\n      columnsDict['severity'] = index++;\n    }\n    return columnsDict;\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/api/v1/status',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    options.targetss = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target),\n        expr: target.expr,\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'single',\n        legendFormat: target.legendFormat || \"\"\n      };\n    });\n    return options;\n  }\n\n  formatInstanceText(labels, legendFormat){\n    if(legendFormat === \"\"){\n      return JSON.stringify(labels);\n    }\n    let aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return legendFormat.replace(aliasRegex, function(match, g1) {\n      if (labels[g1]) {\n        return labels[g1];\n      }\n      return \"\";\n    });\n  }\n\n\n}\nexport function dsRegularEscape(value) {\n  if (typeof value === 'string') {\n    return value.replace(/'/g, \"\\\\\\\\'\");\n  }\n  return value;\n}\n\nexport function dsSpecialRegexEscape(value) {\n  if (typeof value === 'string') {\n    return dsRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()]/g, '\\\\\\\\$&'));\n  }\n  return value;\n}\n"]}