# see https://github.com/eksctl-io/eksctl/tree/main/examples for official eksctl examples
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: testCluster
  region: {AWS-REGION}
  tags:
    initialExpiry: 30h # provide `eksexpiry` tool to change expiry: eksexpiry --name bobCluster --region {AWS-REGION} --in 30h

iam:
  withOIDC: true
  serviceAccounts:
  - metadata:
      name: ebs-csi-controller-sa
      namespace: kube-system
    wellKnownPolicies:
      ebsCSIController: true
  - metadata:
      name: external-dns
      namespace: kube-system
    wellKnownPolicies:
      externalDNS: true
  - metadata:
      name: cert-manager
      namespace: cert-manager
    wellKnownPolicies:
      certManager: true
  # AUTOSCALER: the below 2 metadata items are added to enable autoscaler IAM policies
  - metadata:
      name: cluster-autoscaler
      namespace: kube-system
      labels: {aws-usage: "cluster-ops"}
    wellKnownPolicies:
      autoScaler: true
  - metadata:
      name: autoscaler-service
      namespace: kube-system
    attachPolicy:
      Version: "2012-10-17"
      Statement:
      - Effect: Allow
        Action:
        - "autoscaling:DescribeAutoScalingGroups"
        - "autoscaling:DescribeAutoScalingInstances"
        - "autoscaling:DescribeLaunchConfigurations"
        - "autoscaling:DescribeTags"
        - "autoscaling:SetDesiredCapacity"
        - "autoscaling:TerminateInstanceInAutoScalingGroup"
        - "ec2:DescribeLaunchTemplateVersions"
        Resource: '*'

nodeGroups:
  - name: testNodeGroup1
    instanceType: r5a.2xlarge
    desiredCapacity: 4
    volumeSize: 100
    volumeType: gp2
    ssh: # import default public key (~/.ssh/id_rsa.pub)
      allow: true
    # AUTOSCALER: define minSize and maxSize as well as the above desiredCapacity; for ease of use keep minSize==desiredCapacity
    minSize: 2
    maxSize: 8
    iam:
      withAddonPolicies:
        ebs: true
        autoScaler: true
    availabilityZones: ["{AWS-REGION}a"]
    tags: # EC2 tags required for cluster-autoscaler auto-discovery
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/cluster-13: "owned"
    # OPTIONAL: specify labels for nodes in this nodegroup
    #labels:
    #  labelName: labelValue
    # OPTIONAL: specify k8s taints for this nodegroup
    #taints:
    #  - key: special
    #    value: "true"
    #    effect: NoSchedule

# specifcy all AZs where nodeGroups live; if using just ONE, specify 2 here, one unused (for some weird reason)
availabilityZones: ["{AWS-REGION}a","{AWS-REGION}b"]

addons:
- name: vpc-cni
  attachPolicyARNs:
    - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
- name: coredns
  version: latest
- name: kube-proxy
  version: latest
- name: aws-ebs-csi-driver
  wellKnownPolicies:
    ebsCSIController: true
