[config.backend]
; Supported backends: aws|docker
Type = aws

; AWS backend: specify a path to store SSH keys in, default: ${HOME}/aerolab-keys/
SshKeyPath = /Users/rglonek/aerolab-keys/

; AWS backend: override default aws configured region
Region = us-east-1

[config.defaults]
; Key to modify or show, character '*' expansion is supported
; Key =

; Set to only display values different from application default
; OnlyChanged = false

; Value to set
; Value =

; Reset to default value. Use instead of --value
; Reset = false

[cluster.create]
; Cluster name
; ClusterName = mydc

; Number of nodes
; NodeCount = 1

; Custom config file path to install
; CustomConfigFilePath =

; Features file to install
FeaturesFilePath = /Users/rglonek/aerolab/templates/features.conf

; Heartbeat mode, one of: mcast|mesh|default. Default:don't touch
HeartbeatMode = mesh

; Multicast address to change to in config file
; MulticastAddress =

; Multicast port to change to in config file
; MulticastPort =

; Aerospike server version; add 'c' to the end for community edition
; AerospikeVersion = latest

; Linux distro, one of: ubuntu|centos|amazon
; DistroName = ubuntu

; ubuntu:22.04|20.04|18.04 centos:8|7 amazon:2
; DistroVersion = latest

; Required for downloading older enterprise editions
; Username =

; Required for downloading older enterprise editions
; Password =

; Specify working directory, this is where all installers will download and CA certs will initially generate to
; ChDir =

; Auto-start aerospike after creation of cluster (y/n)
; AutoStartAerospike = y

; Aerolab sets cluster-name by default, use this parameter to not set cluster-name
; NoOverrideClusterName = false

; by default, hostname of each machine will be set, use this to prevent hostname change
; NoSetHostname = false

; optionally specify a script to be installed which will run before aerospike starts
; ScriptEarly =

; optionally specify a script to be installed which will run after aerospike stops
; ScriptLate =

[cluster.create.docker]
; Additional flags to pass to docker, Ex: -F '-v /local:/remote'
; ExtraFlags =

; Only on docker, if a single machine is being deployed, port forward. Format: HOST_PORT:NODE_PORT,HOST_PORT:NODE_PORT
; ExposePortsToHost =

; Impose CPU speed limit. Values acceptable could be '1' or '2' or '0.5' etc.
; CpuLimit =

; Limit RAM available to each node, e.g. 500m, or 1g.
; RamLimit =

; Limit the amount of total memory (ram+swap) each node can use, e.g. 600m. If ram-limit==swap-limit, no swap is available.
; SwapLimit =

; Docker only: run container in privileged mode
; Privileged = false

[cluster.create.aws]
; custom AMI to use (default ubuntu, centos and amazon are supported in eu-west-1,us-west-1,us-east-1,ap-south-1)
; AMI =

; instance type to use
; InstanceType =

; EBS volume sizes in GB, comma-separated. First one is root size. Ex: 12,100,100
; Ebs = 12

; existing security group ID to put instances in
; SecurityGroupID =

; existing subnet ID to put instances in
; SubnetID =

; if set, will install systemd script which will set access-address and alternate-access address to allow public IP connections
; PublicIP = false

[cluster.create.docker]
; Additional flags to pass to docker, Ex: -F '-v /local:/remote'
; ExtraFlags =

; Only on docker, if a single machine is being deployed, port forward. Format: HOST_PORT:NODE_PORT,HOST_PORT:NODE_PORT
; ExposePortsToHost =

; Impose CPU speed limit. Values acceptable could be '1' or '2' or '0.5' etc.
; CpuLimit =

; Limit RAM available to each node, e.g. 500m, or 1g.
; RamLimit =

; Limit the amount of total memory (ram+swap) each node can use, e.g. 600m. If ram-limit==swap-limit, no swap is available.
; SwapLimit =

; Docker only: run container in privileged mode
; Privileged = false

[cluster.start]
; Cluster names, comma separated OR 'all' to affect all clusters
; ClusterName = mydc

; Nodes list, comma separated. Empty=ALL
; Nodes =

; Set to avoid running conf-fix-mesh
; NoFixMesh = false

; Set to prevent Aerospike from starting on cluster-start
; NoStart = false

[cluster.stop]
; Cluster names, comma separated OR 'all' to affect all clusters
; ClusterName = mydc

; Nodes list, comma separated. Empty=ALL
; Nodes =

[cluster.grow]
; Cluster name
; ClusterName = mydc

; Number of nodes
; NodeCount = 1

; Custom config file path to install
; CustomConfigFilePath =

; Features file to install
FeaturesFilePath = /Users/rglonek/aerolab/templates/features.conf

; Heartbeat mode, one of: mcast|mesh|default. Default:don't touch
HeartbeatMode = mesh

; Multicast address to change to in config file
; MulticastAddress =

; Multicast port to change to in config file
; MulticastPort =

; Aerospike server version; add 'c' to the end for community edition
; AerospikeVersion = latest

; Linux distro, one of: ubuntu|centos|amazon
; DistroName = ubuntu

; ubuntu:22.04|20.04|18.04 centos:8|7 amazon:2
; DistroVersion = latest

; Required for downloading older enterprise editions
; Username =

; Required for downloading older enterprise editions
; Password =

; Specify working directory, this is where all installers will download and CA certs will initially generate to
; ChDir =

; Auto-start aerospike after creation of cluster (y/n)
; AutoStartAerospike = y

; Aerolab sets cluster-name by default, use this parameter to not set cluster-name
; NoOverrideClusterName = false

; by default, hostname of each machine will be set, use this to prevent hostname change
; NoSetHostname = false

; optionally specify a script to be installed which will run before aerospike starts
; ScriptEarly =

; optionally specify a script to be installed which will run after aerospike stops
; ScriptLate =

[cluster.grow.docker]
; Additional flags to pass to docker, Ex: -F '-v /local:/remote'
; ExtraFlags =

; Only on docker, if a single machine is being deployed, port forward. Format: HOST_PORT:NODE_PORT,HOST_PORT:NODE_PORT
; ExposePortsToHost =

; Impose CPU speed limit. Values acceptable could be '1' or '2' or '0.5' etc.
; CpuLimit =

; Limit RAM available to each node, e.g. 500m, or 1g.
; RamLimit =

; Limit the amount of total memory (ram+swap) each node can use, e.g. 600m. If ram-limit==swap-limit, no swap is available.
; SwapLimit =

; Docker only: run container in privileged mode
; Privileged = false

[cluster.grow.aws]
; custom AMI to use (default ubuntu, centos and amazon are supported in eu-west-1,us-west-1,us-east-1,ap-south-1)
; AMI =

; instance type to use
; InstanceType =

; EBS volume sizes in GB, comma-separated. First one is root size. Ex: 12,100,100
; Ebs = 12

; existing security group ID to put instances in
; SecurityGroupID =

; existing subnet ID to put instances in
; SubnetID =

; if set, will install systemd script which will set access-address and alternate-access address to allow public IP connections
; PublicIP = false

[cluster.grow.docker]
; Additional flags to pass to docker, Ex: -F '-v /local:/remote'
; ExtraFlags =

; Only on docker, if a single machine is being deployed, port forward. Format: HOST_PORT:NODE_PORT,HOST_PORT:NODE_PORT
; ExposePortsToHost =

; Impose CPU speed limit. Values acceptable could be '1' or '2' or '0.5' etc.
; CpuLimit =

; Limit RAM available to each node, e.g. 500m, or 1g.
; RamLimit =

; Limit the amount of total memory (ram+swap) each node can use, e.g. 600m. If ram-limit==swap-limit, no swap is available.
; SwapLimit =

; Docker only: run container in privileged mode
; Privileged = false

[cluster.destroy]
; Cluster names, comma separated OR 'all' to affect all clusters
; ClusterName = mydc

; Nodes list, comma separated. Empty=ALL
; Nodes =

[cluster.destroy.docker]
; force stop before destroy
; Force = false

[cluster.destroy.docker]
; force stop before destroy
; Force = false

[aerospike.start]
; Cluster name
; ClusterName = mydc

; Nodes list, comma separated. Empty=ALL
; Nodes =

[aerospike.stop]
; Cluster name
; ClusterName = mydc

; Nodes list, comma separated. Empty=ALL
; Nodes =

[aerospike.restart]
; Cluster name
; ClusterName = mydc

; Nodes list, comma separated. Empty=ALL
; Nodes =

[aerospike.status]
; Cluster name
; ClusterName = mydc

; Nodes list, comma separated. Empty=ALL
; Nodes =

[aerospike.upgrade]
; Cluster name
; ClusterName = mydc

; Nodes list, comma separated. Empty=ALL
; Nodes =

; Aerospike server version; add 'c' to the end for community edition
; AerospikeVersion = latest

; Linux distro, one of: ubuntu|centos|amazon
; DistroName = ubuntu

; ubuntu:22.04|20.04|18.04 centos:8|7 amazon:2
; DistroVersion = latest

; Required for downloading older enterprise editions
; Username =

; Required for downloading older enterprise editions
; Password =

; Specify working directory, this is where all installers will download and CA certs will initially generate to
; ChDir =

; Restart aerospike after upgrade (y/n)
; RestartAerospike = y

[attach.shell]
; Cluster name
; ClusterName = mydc

; Node to attach to (or comma-separated list, when using '-- ...'). Example: 'attach shell --node=all -- /some/command' will execute command on all nodes
; Node = 1

[attach.aql]
; Cluster name
; ClusterName = mydc

; Node to attach to (or comma-separated list, when using '-- ...'). Example: 'attach shell --node=all -- /some/command' will execute command on all nodes
; Node = 1

[attach.asadm]
; Cluster name
; ClusterName = mydc

; Node to attach to (or comma-separated list, when using '-- ...'). Example: 'attach shell --node=all -- /some/command' will execute command on all nodes
; Node = 1

[attach.asinfo]
; Cluster name
; ClusterName = mydc

; Node to attach to (or comma-separated list, when using '-- ...'). Example: 'attach shell --node=all -- /some/command' will execute command on all nodes
; Node = 1

[net.block]
; Source Cluster name
; SourceClusterName = mydc

; List of source nodes. Empty=ALL.
; SourceNodeList =

; Destination Cluster name
; DestinationClusterName = mydc-xdr

; List of destination nodes. Empty=ALL.
; DestinationNodeList =

; Block type (reject|drop).
; Type = reject

; Comma separated list of ports to block.
; Ports = 3000

; Block where (input|output). Input=on destination, output=on source.
; BlockOn = input

; for partial packet loss, supported are: random | nth. Not set: drop all packets.
; StatisticMode =

; for partial packet loss mode random. Supported values are between 0.0 and 1.0 (0% to 100%)
; StatisticProbability = 0.5

; for partial packet loss mode nth. Match one every nth packet. Default: 2 (50% loss)
; StatisticEvery = 2

[net.unblock]
; Source Cluster name
; SourceClusterName = mydc

; List of source nodes. Empty=ALL.
; SourceNodeList =

; Destination Cluster name
; DestinationClusterName = mydc-xdr

; List of destination nodes. Empty=ALL.
; DestinationNodeList =

; Block type (reject|drop).
; Type = reject

; Comma separated list of ports to block.
; Ports = 3000

; Block where (input|output). Input=on destination, output=on source.
; BlockOn = input

; for partial packet loss, supported are: random | nth. Not set: drop all packets.
; StatisticMode =

; for partial packet loss mode random. Supported values are between 0.0 and 1.0 (0% to 100%)
; StatisticProbability = 0.5

; for partial packet loss mode nth. Match one every nth packet. Default: 2 (50% loss)
; StatisticEvery = 2

[net.loss-delay]
; Source Cluster name
; SourceClusterName = mydc

; List of source nodes. Empty=ALL.
; SourceNodeList =

; Destination Cluster name
; DestinationClusterName = mydc-xdr

; List of destination nodes. Empty=ALL.
; DestinationNodeList =

; One of: set|del|delall|show. delall does not require dest dc, as it removes all rules
; Action = show

; if action is show, this will cause IPs to resolve to names in output
; ShowNames = false

; Delay (packet latency), e.g. 100ms or 0.5sec
; Delay =

; Network loss in % packets. E.g. 0.1% or 20%
; Loss =

; if set, the rules will be created on destination nodes (avoid EPERM on source, true simulation)
; RunOnDestination = false

; Max link speed, e.g. 100Kbps
; Rate =

[conf.fix-mesh]
; Cluster name
; ClusterName = mydc

; Nodes list, comma separated. Empty=ALL
; Nodes =

[tls.generate]
; Cluster name
; ClusterName = mydc

; Nodes list, comma separated. Empty=ALL
; Nodes =

; Common Name (tlsname)
; TlsName = tls1

; Name of the CA certificate(file)
; CaName = cacert

; If set, will generate certificates on the local machine but not ship them to the cluster nodes
; NoUpload = false

; Specify working directory. This is where all installers will download and CA certs will initially generate to.
; ChDir =

[tls.copy]
; Source Cluster name
; SourceClusterName = mydc

; Source node from which to copy the TLS certificates
; SourceNode = 1

; Destination Cluster name.
; DestinationClusterName = client

; List of destination nodes to copy the TLS certs to, comma separated. Empty=ALL.
; DestinationNodeList =

; Common Name (tlsname)
; TlsName = tls1

[data.insert]
; Namespace name
; Namespace = test

; Set name. Either 'name' or 'random:SIZE'
; Set = myset

; Prefix to add to primary key.
; PkPrefix =

; The start ID of the unique PK names
; PkStartNumber = 1

; The end ID of the unique PK names
; PkEndNumber = 1000

; Bin name. Either 'static:NAME' or 'unique:PREFIX' or 'random:LENGTH'
; Bin = static:mybin

; Bin contents. Either 'static:NAME' or 'unique:PREFIX' or 'random:LENGTH'
; BinContents = unique:bin_

; Should we read (get) after write
; ReadAfterWrite = false

; If set, will ignore backend, cluster name and node ID and connect to SeedNode directly from running machine
; RunDirect = false

; If set, will use multithreading. Set to the number of threads you want processing.
; UseMultiThreaded = 0

; If set, will use this user to authenticate to aerospike cluster
; Username =

; If set, will use this pass to authenticate to aerospike cluster
; Password =

; which aerospike library version to use: 4|5|6
; Version = 6

; if set, will use external auth method
; AuthExternal = false

; Tls CA certificate path
; TlsCaCert =

; Tls client cerrtificate path
; TlsClientCert =

; Tls ServerName
; TlsServerName =

; set ttl for records. Set to -1 to use server default, 0=don't expire
; TTL = -1

; insert to specific node(s); provide comma-separated node IDs
; InsertToNodes =

; insert to X number of partitions at most. to-partitions/to-nodes=partitions-per-node
; InsertToPartitions = 0

; comma-separated list of partition numbers to insert data to. -P and -L  are ignored if this is specified
; InsertToPartitionList =

; action policy: CREATE_ONLY | REPLACE_ONLY | REPLACE | UPDATE_ONLY | UPDATE
; ExistsAction =

; Cluster name of cluster to run aerolab on
; ClusterName = mydc

; Node to run aerolab on to do inserts
; Node = 1

; Seed node IP:PORT. Only use if you are inserting data from different node to another one.
; SeedNode = 127.0.0.1:3000

; Path to the linux compiled aerolab binary; this should not be required
; LinuxBinaryPath =

[data.delete]
; Namespace name
; Namespace = test

; Set name. Either 'name' or 'random:SIZE'
; Set = myset

; Prefix to add to primary key.
; PkPrefix =

; The start ID of the unique PK names
; PkStartNumber = 1

; The end ID of the unique PK names
; PkEndNumber = 1000

; If set, will ignore backend, cluster name and node ID and connect to SeedNode directly from running machine
; RunDirect = false

; If set, will use multithreading. Set to the number of threads you want processing.
; UseMultiThreaded = 0

; If set, will use this user to authenticate to aerospike cluster
; Username =

; If set, will use this pass to authenticate to aerospike cluster
; Password =

; which aerospike library version to use: 4|5|6
; Version = 6

; if set, will use external auth method
; AuthExternal = false

; Tls CA certificate path
; TlsCaCert =

; Tls client cerrtificate path
; TlsClientCert =

; Tls ServerName
; TlsServerName =

; if set, will use durable deletes
; Durable = false

; Cluster name of cluster to run aerolab on
; ClusterName = mydc

; Node to run aerolab on to do inserts
; Node = 1

; Seed node IP:PORT. Only use if you are inserting data from different node to another one.
; SeedNode = 127.0.0.1:3000

; Path to the linux compiled aerolab binary; this should not be required
; LinuxBinaryPath =

[template.destroy]
; Aerospike server version (or 'all')
; AerospikeVersion =

; Linux distro, one of: ubuntu|centos|amazon (or 'all')
; DistroName =

; ubuntu:22.04|20.04|18.04 centos:8|7 amazon:2 (or 'all')
; DistroVersion =

[template.create]
; Aerospike server version; add 'c' to the end for community edition
; AerospikeVersion = latest

; Linux distro, one of: ubuntu|centos|amazon
; DistroName = ubuntu

; ubuntu:22.04|20.04|18.04 centos:8|7 amazon:2
; DistroVersion = latest

; Required for downloading older enterprise editions
; Username =

; Required for downloading older enterprise editions
; Password =

; Specify working directory, this is where all installers will download and CA certs will initially generate to
; ChDir =

[template.create.aws]
; custom AMI to use (default ubuntu, centos and amazon are supported in eu-west-1,us-west-1,us-east-1,ap-south-1)
; AMI =

; instance type to use
; InstanceType =

; EBS volume sizes in GB, comma-separated. First one is root size. Ex: 12,100,100
; Ebs = 12

; existing security group ID to put instances in
; SecurityGroupID =

; existing subnet ID to put instances in
; SubnetID =

; if set, will install systemd script which will set access-address and alternate-access address to allow public IP connections
; PublicIP = false

[installer.list-versions]
; Version Prefix to search for
; Prefix =

; Set this switch to list community editions
; Community = false

; Reverse-sort the results
; Reverse = false

; Show direct access url instead of version number
; Url = false

[installer.download]
; Aerospike server version; add 'c' to the end for community edition
; AerospikeVersion = latest

; Linux distro, one of: ubuntu|centos|amazon
; DistroName = ubuntu

; ubuntu:22.04|20.04|18.04 centos:8|7 amazon:2
; DistroVersion = latest

; Required for downloading older enterprise editions
; Username =

; Required for downloading older enterprise editions
; Password =

; Specify working directory, this is where all installers will download and CA certs will initially generate to
; ChDir =

[logs.get]
; Cluster name
; ClusterName = mydc

; Nodes list, comma separated. Empty=ALL
; Nodes =

; Attempt to get logs from journald instead of log files
; Journal = false

; Aerospike log file path
; LogLocation = /var/log/aerospike.log

; Destination directory (will be created if doesn't exist)
; Destination = ./logs/

[logs.show]
; Cluster name
; ClusterName = mydc

; Node number
; Node = 1

; Attempt to get logs from journald instead of log files
; Journal = false

; Aerospike log file path
; LogLocation = /var/log/aerospike.log

; Follow logs instead of displaying full log
; Follow = false

[files.download]
; Cluster name
; ClusterName = mydc

; Node number(s), comma-separated. Default=ALL
; Nodes =

[files.download.aws]
; do not run scp in quiet mode
; Verbose = false

[files.upload]
; Cluster name
; ClusterName = mydc

; Node number(s), comma-separated. Default=ALL
; Nodes =

[files.upload.aws]
; do not run scp in quiet mode
; Verbose = false

[files.edit]
; Cluster name
; ClusterName = mydc

; Node number
; Node = 1

; Editor command; must be present on the node
; Editor = vi

[files.sync]
; Source Cluster name
; SourceClusterName = mydc

; Source Node number
; SourceNode = 1

; Source Cluster name
; DestClusterName = mydc

; Destination nodes, comma separated; empty = all except source node
; DestNodes =

; Path to sync
; Path =

[xdr.connect]
; Source Cluster name
; SourceClusterName = mydc

; Destination Cluster names, comma separated.
; DestinationClusterNames = destdc

; specify aerospike xdr configuration version (4|5|auto)
; Version = auto

; restart source nodes after connecting (y/n)
; Restart = y

; Comma-separated list of namespaces to connect.
; Namespaces = test

[xdr.create-clusters]
; Comma-separate list of destination cluster names
; DestinationClusterNames = destdc

; Number of nodes per destination cluster
; DestinationNodeCount = 1

; Cluster name
; ClusterName = mydc

; Number of nodes
; NodeCount = 1

; Custom config file path to install
; CustomConfigFilePath =

; Features file to install
FeaturesFilePath = /Users/rglonek/aerolab/templates/features.conf

; Heartbeat mode, one of: mcast|mesh|default. Default:don't touch
HeartbeatMode = mesh

; Multicast address to change to in config file
; MulticastAddress =

; Multicast port to change to in config file
; MulticastPort =

; Aerospike server version; add 'c' to the end for community edition
; AerospikeVersion = latest

; Linux distro, one of: ubuntu|centos|amazon
; DistroName = ubuntu

; ubuntu:22.04|20.04|18.04 centos:8|7 amazon:2
; DistroVersion = latest

; Required for downloading older enterprise editions
; Username =

; Required for downloading older enterprise editions
; Password =

; Specify working directory, this is where all installers will download and CA certs will initially generate to
; ChDir =

; Auto-start aerospike after creation of cluster (y/n)
; AutoStartAerospike = y

; Aerolab sets cluster-name by default, use this parameter to not set cluster-name
; NoOverrideClusterName = false

; by default, hostname of each machine will be set, use this to prevent hostname change
; NoSetHostname = false

; optionally specify a script to be installed which will run before aerospike starts
; ScriptEarly =

; optionally specify a script to be installed which will run after aerospike stops
; ScriptLate =

; specify aerospike xdr configuration version (4|5|auto)
; Version = auto

; restart source nodes after connecting (y/n)
; Restart = y

; Comma-separated list of namespaces to connect.
; Namespaces = test

[xdr.create-clusters.docker]
; Additional flags to pass to docker, Ex: -F '-v /local:/remote'
; ExtraFlags =

; Only on docker, if a single machine is being deployed, port forward. Format: HOST_PORT:NODE_PORT,HOST_PORT:NODE_PORT
; ExposePortsToHost =

; Impose CPU speed limit. Values acceptable could be '1' or '2' or '0.5' etc.
; CpuLimit =

; Limit RAM available to each node, e.g. 500m, or 1g.
; RamLimit =

; Limit the amount of total memory (ram+swap) each node can use, e.g. 600m. If ram-limit==swap-limit, no swap is available.
; SwapLimit =

; Docker only: run container in privileged mode
; Privileged = false

[xdr.create-clusters.docker]
; Additional flags to pass to docker, Ex: -F '-v /local:/remote'
; ExtraFlags =

; Only on docker, if a single machine is being deployed, port forward. Format: HOST_PORT:NODE_PORT,HOST_PORT:NODE_PORT
; ExposePortsToHost =

; Impose CPU speed limit. Values acceptable could be '1' or '2' or '0.5' etc.
; CpuLimit =

; Limit RAM available to each node, e.g. 500m, or 1g.
; RamLimit =

; Limit the amount of total memory (ram+swap) each node can use, e.g. 600m. If ram-limit==swap-limit, no swap is available.
; SwapLimit =

; Docker only: run container in privileged mode
; Privileged = false

[xdr.create-clusters.aws]
; custom AMI to use (default ubuntu, centos and amazon are supported in eu-west-1,us-west-1,us-east-1,ap-south-1)
; AMI =

; instance type to use
; InstanceType =

; EBS volume sizes in GB, comma-separated. First one is root size. Ex: 12,100,100
; Ebs = 12

; existing security group ID to put instances in
; SecurityGroupID =

; existing subnet ID to put instances in
; SubnetID =

; if set, will install systemd script which will set access-address and alternate-access address to allow public IP connections
; PublicIP = false

[roster.show]
; Cluster name
; ClusterName = mydc

; Nodes list, comma separated. Empty=ALL
; Nodes =

; Namespace name
; Namespace = test

[roster.apply]
; Cluster name
; ClusterName = mydc

; Nodes list, comma separated. Empty=ALL
; Nodes =

; Namespace name
; Namespace = test

; set this to specify customer roster; leave empty to apply observed nodes automatically
; Roster =

; if set, will not apply recluster command after roster-set
; NoRecluster = false

[roster.cheat]
; Namespace name
; Namespace = test

